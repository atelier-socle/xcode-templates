//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Atelier Socle Xcode Templates
//

import XCTest
import Reusable
@testable import ___VARIABLE_sceneName___

final class ___VARIABLE_sceneName___ViewControllerTests: XCTestCase {

    // MARK: IBOutlet

    private var buttonFetchName: UIButton!
    private var tableView: UITableView!

    // MARK: Properties

    private var viewController: ___VARIABLE_sceneName___ViewController!
    private var presenter: Mock___VARIABLE_sceneName___PresenterLogic!

    // MARK: Life Cycle

    override func setUp() {
        super.setUp()
        viewController = StoryboardScene.___VARIABLE_sceneName___.initialScene.instantiate()
        presenter = Mock___VARIABLE_sceneName___PresenterLogic()
        viewController.inject(presenter: presenter)
        configureOutlets()
    }

    override func tearDown() {
        super.tearDown()
    }

    private func configureOutlets() {
        buttonFetchName = viewController.view.findView(forIdentifier: ___VARIABLE_sceneName___Accessibility.button.rawValue) as? UIButton
        let tableViewIdentifier = ___VARIABLE_sceneName___Accessibility.tableView.rawValue
        tableView = viewController.view.findView(forIdentifier: tableViewIdentifier) as? UITableView
    }

    private func launchControllerLifeCycle() {
        let window = UIWindow()
        window.addSubview(viewController.view)
        RunLoop.current.run(until: Date())
    }

}

// MARK: - Configuration

extension ___VARIABLE_sceneName___ViewControllerTests {

    func testControllerLifeCycle() {
        launchControllerLifeCycle()
        XCTAssertTrue(presenter.didViewDidLoad)
    }

    func testDefaultConfiguration() {
        launchControllerLifeCycle()
        XCTAssertFalse(buttonFetchName.allTargets.isEmpty)

        let indexPath = IndexPath(row: 0, section: 0)
        XCTAssertNotNil(tableView.dequeueReusableCell(for: indexPath) as ___VARIABLE_sceneName___TableViewCell)
        XCTAssertEqual(tableView.rowHeight, UITableView.automaticDimension)
        XCTAssertNotNil(tableView.dataSource)
        XCTAssertNotNil(tableView.delegate)
    }

}

// MARK: - Actions

extension ___VARIABLE_sceneName___ViewControllerTests {

    func testFetchNamePressed() {
        buttonFetchName.sendActions(for: .touchUpInside)
        XCTAssertTrue(presenter.didFetchNewName)
    }

}

// MARK: - ___VARIABLE_sceneName___ControllerLogic

extension ___VARIABLE_sceneName___ViewControllerTests {

    func testConfigureDefaultLabels() {
        let viewModel = ___VARIABLE_sceneName___ViewModel()
        viewController.configureDefaultLabels(viewModel: viewModel)
        XCTAssertEqual(viewController.title, "L10n.___VARIABLE_sceneName___.NavigationBar.title")
        XCTAssertEqual(buttonFetchName.title(for: .normal), "Fetch name")
    }

    func testReloadNames() {
        let viewModel = ___VARIABLE_sceneName___ViewModel()
        viewController.reloadNames(viewModel: viewModel)
    }

}
