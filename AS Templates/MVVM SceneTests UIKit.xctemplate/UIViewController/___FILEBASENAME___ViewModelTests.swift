//
//  ___VARIABLE_sceneName___ViewModelTests.swift
//  Sample
//
//  Created by Tom Baranes on 30/03/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Atelier Socle Xcode Templates
//

import XCTest
@testable import Sample_iOS

final class ___VARIABLE_sceneName___ModelsViewModelTests: XCTestCase {

    // MARK: Properties

    private var viewModel = ___VARIABLE_sceneName___ViewModel()
    private var expectation: XCTestExpectation?

    // MARK: Life Cycle

    override func setUp() {
        super.setUp()
        viewModel = ___VARIABLE_sceneName___ViewModel()
    }

    override class func tearDown() {
        super.tearDown()
    }

}

// MARK: - Requests

extension ___VARIABLE_sceneName___ModelsViewModelTests {

    func testIsLoading() {
        XCTAssertFalse(viewModel.isLoading)
        viewModel.fetchNewName()
        XCTAssertTrue(viewModel.isLoading)
    }

    func testFetchNewName() {
        XCTAssertTrue(viewModel.names.isEmpty)
        expectation = self.expectation(description: "did expect new name")
        viewModel.fetchNewName()
        DispatchQueue.main.asyncAfter(deadline: .now() + 4) {
            self.expectation?.fulfill()
        }
        wait(for: [expectation!], timeout: 5)
        XCTAssertEqual(viewModel.names.count, 1)
    }

}

// MARK: - Localizables

extension ___VARIABLE_sceneName___ModelsViewModelTests {

    func testLocalizables() {
        XCTAssertEqual(viewModel.navigationBarTitle, "L10n.___VARIABLE_sceneName___.NavigationBar.title")
        XCTAssertEqual(viewModel.fetchNameButton, "Fetch name")
    }

}

// MARK: - ___VARIABLE_sceneName___TableViewDataSourceDelegate

extension ___VARIABLE_sceneName___ModelsViewModelTests {

    func testCellDelegate() {
        XCTAssertEqual(viewModel.cellDelegate as? ___VARIABLE_sceneName___ViewModel, viewModel)
    }

}

// MARK: - ___VARIABLE_sceneName___TableViewDelegateLogic

extension ___VARIABLE_sceneName___ModelsViewModelTests {

    func testDidSelectRow() {
        let viewModel = ___VARIABLE_sceneName___ViewModel(names: ["test"])
        viewModel.didSelectRow(at: IndexPath(row: 0, section: 0))
        XCTAssertEqual(viewModel.selectedName, "test")
    }

}

// MARK: - Actions

extension ___VARIABLE_sceneName___ModelsViewModelTests {

    func testExecuteButton() {
        XCTAssertNoThrow(viewModel.executeButton())
    }

}
